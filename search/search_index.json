{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#132-20220907","title":"1.3.2 - 2022.09.07","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Support for adding Script descriptions when creating new scripts.</li> <li>Created the <code>PyTCI</code> library.</li> <li>Created the <code>ts-hanicparser</code> library for parsing HANIC filters.</li> <li>Warning validator for the HANIC filter field.</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Removed residual Flake8 error and warnings for the web interface.</li> <li>Fixed the required authorization for creating jobs without a script.</li> <li>Fixed error when setting an empty string as capture filter.</li> <li>Show real progress in job dialog.</li> <li>Job stuck in processing when TCI Master does not have job file ready.</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Updated the CI runner to use Fedora 36.</li> <li>Updated Flake8 to version 4.0.0.</li> <li>Changed HANIC filter field to TextArea.</li> <li>Increased the default table pagination to 10 items.</li> </ul>"},{"location":"changelog/#131-20220802","title":"1.3.1 - 2022.08.02","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Url scheme support (http/https) to <code>config.toml</code></li> <li>User applications (API Keys).</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Multiple lines in one progress bar in job dialog.</li> <li>Recognizes 'url' setting in <code>config.toml</code></li> <li>Progress bar progress when job starts.</li> <li>Refreshing token could cause freezing.</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Brighter color to 'To process' badge in jobs.</li> </ul>"},{"location":"changelog/#130-20220718","title":"1.3.0 - 2022.07.18","text":"<p>Note: The whole frontend has been reworked, many changes not listed.</p>"},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>Support for line colors.</li> <li>Support for server URL configuration.</li> <li>Logs can be viewed and downloaded from API.</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Error message when script fails shows <code>stderr</code> and its return code.</li> <li>Downloading of raw pcap file now works (can also download pcapng).</li> <li>Output files correctly deleted when deleting a job.</li> <li>Inactive lines automatically removed.</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Updated package versions in <code>requirements.txt</code>.</li> <li>Code review including dependency updates.</li> <li>Removed 5000-character limit for job filter.</li> <li>Frontend changed to angular (it is now a seperate unit).</li> <li>Many of the api calls changed to accomodate frontend change.</li> <li>Support for config file (removed .env, added config.toml).</li> </ul>"},{"location":"changelog/#120-20211006","title":"1.2.0 - 2021.10.06","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>GitLab's security checking using <code>Bandit</code>, <code>ESLint</code>, <code>Semgrep</code>, and <code>Secret detector</code>.</li> <li>Log files now include information about the PCAP scripts.</li> <li>Documentation can now include <code>Graphviz</code> diagrams.</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Password length limit is checked in the password setter.</li> <li>Checking whether the user is attempting to log in as a <code>System</code> user is done directly in the <code>login</code> method.</li> <li>All tests drop tables before running.</li> <li>The user page is rendered again after all requests finish.</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Job filter length limit increased to 5000 characters.</li> <li>User password length limit increased to 500 characters.</li> <li>When a job is downloaded, the file names correspond to the job name.</li> </ul>"},{"location":"changelog/#120-rc3-20210917","title":"1.2.0-rc.3 - 2021.09.17","text":""},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Changing path to directory with temporary files is now possible.</li> </ul>"},{"location":"changelog/#120-rc2-20210917","title":"1.2.0-rc.2 - 2021.09.17","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Boolean values in config file are now correctly converted from strings.</li> </ul>"},{"location":"changelog/#120-rc1-20210916","title":"1.2.0-rc.1 - 2021.09.16","text":"<p>Note: This is a very large release, many smaller changes are not listed.</p>"},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>A REST API to interface with the system programmatically.</li> <li>LDAP support, so users can connect to the system using an existing account.</li> <li>Traffic can now be captured using TCPDump on the TCI backend.</li> <li>Support for database migrations.</li> <li>Local testing and development is possible using Docker containers.</li> <li>Added automatic tests and coverage reports.</li> <li>Code quality is automatically measured using Flake8.</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>A complete backend restructure and rewrite. Notable:<ul> <li>Database models are now contained in separate files, each containing one database table.</li> <li>All important methods for dealing the database models are contained within them.</li> </ul> </li> <li>Logs are now split on a weekly basis.</li> </ul>"},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Captured traffic can now be processed using Docker containers.</li> </ul>"},{"location":"changelog/#111-20210307","title":"1.1.1 - 2021.03.07","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Line overview which shows the number of pending jobs per line.</li> <li>Scripts can no longer be deleted if assigned to some job in the [waiting, running, done] state.</li> <li>A Docker image for processing jobs.</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Administrators can delete other administrators.</li> </ul>"},{"location":"changelog/#110-20201213","title":"1.1.0 - 2020.12.13","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Table pagination for all tables.</li> <li>Better log scrolling.</li> <li>Progress bar in job modal dialog.</li> <li>Line state is shown with color.</li> <li>HANIC filter hint in new job form.</li> <li>Job table contains more information.</li> <li>Hints when creating a new script.</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Wrong username and password return the same error message, and take the same amount of time.</li> <li>Buttons no  longer overlap.</li> <li>All pages have unified design.</li> <li>Most errors are handled/presented in the same way.</li> <li>Checkboxes don't uncheck on wrong form input.</li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":"<p>To be able to use the TCI system download and install hive and drone packages.</p>"},{"location":"getting_started/#more-information","title":"More Information","text":"<p>For detailed information see specific package:</p> <ul> <li>drone</li> <li>hive</li> <li>libraries</li> </ul>"},{"location":"getting_started/#running-the-tci-system-with-docker-compose","title":"Running the TCI System With Docker Compose","text":"<ol> <li>Download docker-compose.yaml.</li> <li>Download and extract tar packages of drone and hive. (see packages)</li> <li>Run <code>make docker</code> in root directories of drone and hive to build docker images of both packages.</li> <li>Pull a mysql docker image <code>docker pull mysql</code>.</li> <li>Edit <code>docker-compose.yaml</code> as you see fit.<ul> <li>Might be necessary to edit the version of docker images based on the version you downloaded. Look for <code>image: tci_hive:&lt;version&gt;</code>, same for <code>tci_drone</code>.</li> <li>This docker-compose automatically generates tokens in hive and sets them in drones. If you wish to do this manually change <code>entrypoint</code> in <code>tci_drone</code> (Just delete <code>-a</code> in <code>entrypoint: \"/drone/wait-for-it.sh -t 60 tci_hive:8080 -- /drone/entrypoint.sh -a\"</code>)</li> </ul> </li> <li>Finally run <code>docker compose up</code> in the directory of <code>docker-compose.yaml</code>.</li> </ol>"},{"location":"packages/drone/","title":"Drone","text":"<p>A drone for the Traffic Capture Infrastructure system.</p> <p>Sole purpose of a drone is to capture network traffic with a specified filter and send the data back to hive, that controls it.</p>"},{"location":"packages/drone/#capture-backend","title":"Capture Backend","text":"<p>Drone can use couple of tools, that do the capturing.</p>"},{"location":"packages/drone/#tcpdump","title":"TCPDump","text":"<p>The simplest capturing. Select the appropriate network interface in <code>config.toml</code></p>"},{"location":"packages/drone/#required-tools","title":"Required Tools","text":"<ul> <li>tcpdump</li> </ul>"},{"location":"packages/drone/#ndp","title":"NDP","text":"<p>Used for capturing with high speed network cards.</p>"},{"location":"packages/drone/#required-tools_1","title":"Required Tools","text":"<ul> <li>Network Development Kit</li> <li>filterctl</li> <li>ndp-receive</li> <li>nfb-dma</li> <li>nfb-bus</li> </ul>"},{"location":"packages/drone/#config","title":"Config","text":"<p>Example configuration file (default path: <code>/etc/tci/drone/config.toml</code>):</p> <pre><code>[hive]\nurl = \"http://localhost:8080/hive/v1\"\ntoken = \"\"\n\n[drone]\nname = \"drone1\"\ndescription = \"This is a description\"\noutput_folder = \"./\"\ncapture_backend = \"tcpdump\"\n#capture_limit = 0\n#update_captured_interval = 0.05\n\n[tcpdump]\nifc = \"eth0\"\n#tcpdump_path = \"/bin/tcpdump\"\n\n#[ndp]\n#device = \"/dev/nfb/by-serial-no/NFB-200G2QL/61\"\n#dma_have = 16\n#cores = 2\n#filterctl_path = \"/bin/filterctl\"\n#ndp-receive_path = \"/bin/ndp-receive\"\n#nfb-dma_path = \"/bin/nfb-dma\"\n#nfb-bus_path = \"/bin/nfb-bus\"\n</code></pre>"},{"location":"packages/drone/#packages","title":"Packages","text":"<p>Find packages here</p>"},{"location":"packages/drone/#installation-with-rpm","title":"Installation with RPM","text":"<p>The drone in provided in a RPM form, so it can be installed like this: <code>dnf -y install /path/to/tci_drone.rpm</code></p>"},{"location":"packages/drone/#installation-using-docker","title":"Installation Using Docker","text":"<p>Note: You can also run the whole system using docker compose (see Getting Started)</p> <p>First download the drone tar package (see Packages). Extract the package and in the root folder run <code>make docker</code>. This will build the docker image tci_drone:\\&lt;version&gt;.</p>"},{"location":"packages/drone/#supported-enviromental-variables","title":"Supported Enviromental Variables","text":"<ul> <li><code>HIVE_URL</code><ul> <li>URL of hive to connect to</li> <li>default: <code>http://localhost:8080</code></li> </ul> </li> <li><code>TOKEN</code><ul> <li>token generated on hive for the drone</li> <li>the only required variable</li> </ul> </li> <li><code>OUTPUT_FOLDER</code><ul> <li>directory to use for output files (pcaps)</li> <li>default: <code>/pcaps/</code></li> </ul> </li> <li><code>LOG_DIR</code><ul> <li>directory to use for logs</li> <li>default: <code>/var/log/tci/drone/</code></li> </ul> </li> <li><code>NETWORK_INTERFACE</code><ul> <li>network interface to use</li> <li>default: <code>eth0</code></li> </ul> </li> <li><code>TCPDUMP_PATH</code><ul> <li>path to tcpdump</li> <li>default: <code>/usr/sbin/tcpdump</code></li> </ul> </li> </ul>"},{"location":"packages/drone/#example-of-running-a-docker-container","title":"Example of Running a Docker Container:","text":"<p><code>docker run -d tci_drone:&lt;version&gt; -e TOKEN=\"GENERATED_TOKEN\" -e HIVE_URL=\"http://hive.url\"</code></p>"},{"location":"packages/drone/#installation-from-source","title":"Installation From Source","text":"<p>...</p>"},{"location":"packages/hive/","title":"Hive","text":"<p>Hive is used to control all the drones that capture traffic. It can be controlled via WEB interface or REST API.</p>"},{"location":"packages/hive/#config","title":"Config","text":"<p>Example configuration file (default path: <code>/etc/tci/hive/config.toml</code>):</p> <pre><code># vi: ft=config:\n\n# Secret key to sign cookies (and JWT).\n# Good way to generate the key:\n#   python -c 'import secrets; print(secrets.token_hex())'\nsecret_key = \"super secret key\"\n\n# Configuration of the database connection.\n# DB will be connected in the following way:\n#   type://user:pass@host/path?options\n[db]\nuser = \"tciguidb-user\"\npass = \"tciguidb-password\"\nhost = \"localhost\"\npath = \"tciguidb\"\ntype = \"mysql\"\noptions = \"charset=utf8mb4\"\n# track_modifications = false\n# track_record_queries = false\n\n# LDAP connection for usert authentication.\n# [ldap]\n# uri = \"ldap://localhost:389\"\n\n# API JWT settings.\n# [api]\n# access_token_expiry_time = 3600\n# refresh_token_expiry_time = 604800\n\n# Basic application settings.\n[gui]\nhost = \"0.0.0.0\"\nport = 8080\n# threaded = true\n# url = \"custom-url.org\"\n# url_scheme = \"https\"\n\n# PCAP Processing settings.\n# [processing]\n# pcap_folder = \"./pcaps\"\n# tmp_folder = \"./tmp\"\n# use_docker = true\n\n# Logging settings\n# [log]\n# directory = '.'\n# default_name = 'tcigui.log'\n</code></pre>"},{"location":"packages/hive/#packages","title":"Packages","text":"<p>Find packages here</p>"},{"location":"packages/hive/#installation-with-rpm-oraclelinux-8","title":"Installation with RPM (OracleLinux 8)","text":"<p>It is necessary to install SQL database and set it up in config [db]</p>"},{"location":"packages/hive/#1-installing-sql-db","title":"1) Installing SQL DB","text":"<pre><code># installing and enabling the database\nyum install -y mariadb-server\nsystemctl enable --now mariadb\n</code></pre>"},{"location":"packages/hive/#2-creating-user-and-database-with-mysql","title":"2) Creating user and database with mysql","text":"<p>The credentials you use here should be the same as in <code>/etc/tci/hive/config.toml</code> in the <code>[db]</code> section.</p> <pre><code># first we need to connect to the database (in this example using user 'root' with password '1234', default password is empty so could just omit \"-p1234\")\n# it's setting up user 'tciguidb-user' with password 'tciguidb-password' on a database 'tciguidb' on localhost granting privileges only on the 'tciguidb' database\nmysql -u root -ppass -e \u201c\ncreate user \u2018tciguidb-user\u2019@\u2018localhost\u2019 indentified by \u2018tciguidb-password\u2019;\ncreate database tciguidb;\ngrant all privileges on tciguidb.* to \u2018tciguidb-user\u2019@\u2018localhost\u2019;\nflush privileges;\n\u201c\n</code></pre>"},{"location":"packages/hive/#4-installing-dependencies","title":"4) Installing dependencies","text":"<pre><code># here we use mariadb, you could use other MYSQL database\nyum install python3 python39-devel mariadb-devel\n</code></pre>"},{"location":"packages/hive/#5-installing-the-hive","title":"5) Installing the hive","text":"<p>Download the package version you want (see packages).</p> <pre><code>dnf -y install /path/to/tci_hive.rpm\n</code></pre>"},{"location":"packages/hive/#6-customization","title":"6) Customization","text":"<p>Last step would be to customize the config (located in <code>/etc/tci/hive/config.toml</code>). If you change the <code>[db]</code> part you should also redeploy the database (script provided in <code>/usr/bin/tci/hive/deploy_db.sh</code>)</p>"},{"location":"packages/hive/#installation-using-docker","title":"Installation Using Docker","text":"<p>Note: You can also run the whole system using docker compose (see Getting Started)</p> <p>For correctly running, hive needs a databse. You can run this in docker as well, for example: <code>docker run -d mysql -e MYSQL_ROOT_PASSWORD=toor -e MYSQL_DATABASE=tciguidb -e MYSQL_USER=tciguidb-user -e MYSQL_PASSWORD=tciguidb-password</code></p> <p>First download the hive tar package (see Packages). Extract the package and in the root folder run <code>make docker</code>. This will build the docker image tci_hive:\\&lt;version&gt;.</p>"},{"location":"packages/hive/#supported-enviromental-variables","title":"Supported Enviromental Variables","text":"<ul> <li><code>DB_USER</code><ul> <li>default: <code>tciguidb-user</code></li> </ul> </li> <li><code>DB_PASS</code><ul> <li>default: <code>tciguidb-password</code></li> </ul> </li> <li><code>DB_HOST</code><ul> <li>default: <code>localhost</code></li> </ul> </li> <li><code>DB_PATH</code><ul> <li>default: <code>tciguidb</code></li> </ul> </li> <li><code>DB_TYPE</code><ul> <li>default: <code>mysql</code></li> </ul> </li> <li><code>DB_OPTIONS</code><ul> <li>default: <code>charset=utf8mb4</code></li> </ul> </li> <li><code>LDAP_URI</code><ul> <li>default: <code>ldap://localhost:389</code></li> </ul> </li> <li><code>HOST</code><ul> <li>default: <code>0.0.0.0</code></li> </ul> </li> <li><code>PORT</code><ul> <li>default: <code>8080</code></li> </ul> </li> <li><code>OUTPUT_FOLDER</code><ul> <li>directory to use for output files (pcaps)</li> <li>default: <code>/pcaps/</code></li> </ul> </li> <li><code>TMP_FOLDER</code><ul> <li>directory to use for temporary files</li> <li>default: <code>/tmp/</code></li> </ul> </li> <li><code>LOG_DIR</code><ul> <li>directory to use for logs</li> <li>default: <code>/var/log/tci/hive/</code></li> </ul> </li> </ul>"},{"location":"packages/hive/#example-of-running-a-docker-container","title":"Example of Running a Docker Container:","text":"<p><code>docker run -d tci_hive:&lt;version&gt; -e PORT=8000 -e LOG_DIR=/logs/hive/</code></p>"},{"location":"packages/hive/#installation-from-source","title":"Installation from source","text":"<p>...</p>"},{"location":"packages/libraries/","title":"TCI Client Libraries","text":"<p>While it is possible to interact with the TCI using the Hive web interface, sometimes an automated approach is preferred. In this case, the TCI system can be controlled using the implemented REST API. However, you can find prepared Python, Go, and Rust libraries below to simplify this process. To access the system using any of the libraries, a user access token must be generated.</p>"},{"location":"packages/libraries/#generating-an-access-token","title":"Generating an Access Token","text":"<p>The access token can be generated using the web interface in the \"Applications\" tab. Creating a new application will generate an access token. This token can be accessed by the user only when it is generated, so make sure to copy it. Once the token is generated, authorizing with this token is equivalent to using the TCI system using the owner's account.</p> <p>Each token should be used only within a single script. Make sure to never publish your tokens. If any token needs to be invalidated, simply delete the given application and generate a new token by creating a new application.</p>"},{"location":"packages/libraries/#pytci","title":"PyTCI","text":"<p>The PyTCI library is the most commonly used library, and is thus the most tested.</p>"},{"location":"packages/libraries/#example-usage","title":"Example Usage","text":"<pre><code>from pytci import PyTCI\n\ntci = PyTCI(\"localhost\", 8080)\ntci.set_access_token(\"your access token\")\n\njobs = tci.get_jobs()\nfor j in jobs:\n    print(j.name)\n\nnew_job = tci.create_job(\n    name=\"My new job!\",\n    duration=10,\n    max_capture_data=50,\n    lines=[\"CaptureLine1\"],\n    filter='',\n    script_name=None,\n    script_args=None\n)\njob_info = tci.get_job_status(new_job.id)\nprint(job_info.status)\n</code></pre>"},{"location":"packages/libraries/#packages","title":"Packages","text":"<p>Find packages here</p>"},{"location":"packages/libraries/#rs-tci","title":"rs-tci","text":""},{"location":"packages/libraries/#simple-example","title":"Simple Example","text":"<pre><code>extern crate rs_tci;\n\nuse rs_tci::client::TCI;\nuse std::env;\n\nfn main() {\n    let endpoint = \"https://tci2.liberouter.org/api/v1\";\n    let token = match env::args().nth(1) {\n        Some(v) =&gt; v,\n        None =&gt; \"&lt;foobar token&gt;\".to_string(),\n    };\n\n    // Creating the client\n    let client = TCI::new(endpoint, token.as_str()).unwrap();\n    println!(\"{}\", client);\n\n    // Getting all the available jobs\n    let jobs = client.get_jobs().unwrap();\n    println!(\"{:#?}\", jobs);\n\n    // Getting all the available lines\n    let lines = client.get_lines().unwrap();\n    println!(\"{:#?}\", lines);\n}\n</code></pre>"},{"location":"packages/libraries/#complex-example","title":"Complex Example","text":"<pre><code>extern crate rs_tci;\n\nuse std::env;\nuse std::thread;\nuse std::time::Duration;\n\nuse rs_tci::client::TCI;\nuse rs_tci::models::requests;\n\nfn main() {\n    let endpoint = \"https://tci2.liberouter.org/api/v1\";\n    let token = match env::args().nth(1) {\n        Some(v) =&gt; v,\n        None =&gt; \"&lt;foobar token&gt;\".to_string(),\n    };\n\n    // Creating the client\n    let client = match TCI::new(endpoint, token.as_str()) {\n        Ok(v) =&gt; v,\n        Err(e) =&gt; panic!(\"{}\", e),\n    };\n\n    // We want to create a new capture job.\n    // To do this, we need to figure out which lines are available to the hive.\n    let lines = client.get_lines().unwrap();\n\n    // Furthermore, image that the job we want to create is urgent.\n    // We therefore select only the line names which are currently idle.\n    let line_names: Vec&lt;&amp;str&gt; = lines\n        .iter()\n        .filter(|l| l.status == Some(\"Idle\".to_string()))\n        .map(|line| line.name.as_str())\n        .collect();\n\n    println!(\"Choosing lines {:#?}\", line_names);\n\n    // We create our job model and send it to the hive.\n    let job = requests::Job {\n        name: \"UrgentJob\",\n        filter: \"port 443\",\n        duration: 10,\n        max_capture_data: 10_000_000,\n        lines: line_names,\n        script_name: None,\n        script_args: None,\n    };\n    let created_job = client.create_job(job).unwrap();\n\n    println!(\"The job was created: {:#?}\", created_job);\n\n    // Now we want to wait until the job we created is finished.\n    // We wait at least for the duration of the job, then we keep\n    // asking the hive about the status.\n    thread::sleep(Duration::from_secs(10));\n    loop {\n        let job = client.get_job(created_job.id).unwrap();\n        if job.end_time.is_none() &amp;&amp; job.status != \"Failed\" {\n            thread::sleep(Duration::from_secs(5));\n        } else {\n            break;\n        }\n    }\n\n    // Once the job is finished, we can download the ZIP file.\n    client.download_job(created_job.id, \"content.zip\").unwrap();\n}\n</code></pre>"},{"location":"packages/libraries/#packages_1","title":"Packages","text":"<p>Find packages here</p>"},{"location":"packages/libraries/#gotci","title":"gotci","text":"<p>The gotci library is currently work in progress, and is due to be released shortly.</p>"},{"location":"packages/libraries/#packages_2","title":"Packages","text":"<p>Find packages here</p>"},{"location":"reference/api/","title":"API Documentation","text":""},{"location":"reference/api/#using-the-api","title":"Using the API","text":"<p>The API for the TCI system can be found at the <code>/api/&lt;version&gt;</code> path, where <code>&lt;version&gt;</code> is the API version. Currently, the only available version is v1.</p>"},{"location":"reference/api/#authentication-with-the-api","title":"Authentication with the API","text":"<p>The API uses JWT for authentication. To authenticate with a token, one must first be generated. This can be done by sending the following request to the API:</p> <pre><code>GET /api/v1/token HTTP/1.1\nAccept: application/json\nAuthorization: Basic &lt;username:password&gt;\n</code></pre> <p>where the <code>&lt;username:password&gt;</code> string is again Base64 encoded. This request returns a JSON string with the following contents:</p> <pre><code>{\n    'access_token': 'API_ACCESS_TOKEN',\n    'access_token_expires_in': 'SECONDS_ACCESS',\n    'refresh_token': 'API_REFRESH_TOKEN',\n    'refresh_token_expires_in': 'SECONDS_REFRESH',\n    'identity': {\n        username: 'USERNAME',\n        email: 'EMAIL',\n        authorization_level: 'LEVEL',\n    }\n}\n</code></pre> <p>Once the token is obtained, the Authorization field in new HTTP requests can be modified to be the following:</p> <pre><code>Authorization: Bearer &lt;token&gt;\n</code></pre> <p>The token will be invalid after <code>SECONDS_ACCESS</code> seconds. It can be then refreshed by sending the following request:</p> <pre><code>POST /api/v1/token HTTP/1.1\nAccept: application/json\nAuthorization: Bearer API_REFRESH_TOKEN\n</code></pre>"},{"location":"reference/api/#an-example-request","title":"An example request","text":"<p>The following example shows how to connect to the API, generate a user token, and get all the existing users.</p> <pre><code>GET /api/v1/token HTTP/1.1\nAccept: application/json,\nAuthorization: Basic QWRtaW46YWRtaW4=\n</code></pre> <pre><code>GET /api/v1/users HTTP/1.1\nAccept: application/json\nAuthorization: Bearer TOKEN\n</code></pre>"},{"location":"reference/architecture/","title":"System Architecture","text":"<p>The Traffic Capture Infrastructure (TCI) system takes inspiration from the existing network flow systems and is composed of multiple interconnected modules; an overview of which can be seen in the diagram below.</p> <p></p> <p>The traffic capture itself is managed by the TCI hive and the TCI drones, which work similarly to a flow collector and exporter respectively. This backend captures the traffic using 1 to n drones. The captured data is then collected and merged using the TCI hive.</p> <p>The information system can be accessed using the angular web interface or using one of the supplied API libraries. Using the web interface to access the TCI system gives the users full access to all the underlying features and is the default way of interacting with the system. However, in cases where a degree of automatization is required (such as when capturing network incidents), the system can be fully controlled using one of the API libraries.</p> <p>The whole TCI system is written in Python using the Flask framework. Flask was selected due to its lightweight size and large number of extension libraries. The system uses SQLAlchemy as an ORM which gives us the flexibility of deploying the system using a large number of available database backends. The web interface was built using Angular.</p>"}]}